MODULE main
VAR	
  user1_request : boolean;
  user2_request : boolean;
  user1_has_resource: boolean;
  user2_has_resource: boolean;

  -- Firstly, it is worth noticing that, in our model, if a user has a resource and he makes, 
  -- in the same step, another request, it might happend that he endlessly has the resource!
  -- 
  -- step1: 
  --         user1_has_resource: TRUE
  --         user1_request: TRUE
  --
  -- step2:
  --	     user1_has_resource: TRUE
  --         user1_request: TRUE
  -- 
  -- step "n":
  --	     it could go on and on and on, always having the resource
  --
  -- So we should try to find a way to avoid this, cause it's compromising the verification of the
  -- safety properties.

  -- Maybe we could add two other variables to improve the assignment of the resources:
  -- these two variables could be named user1_had_resource and user2_had_resource (booleans).
  -- These variables are TRUE if the respective user had the resource in the immediately
  -- previous step, otherwise they're FALSE. In order to model their behavior,
  -- we could do something like:
  -- init(user1_had_resource) := FALSE;
  -- next(user1_had_resource) := case
  --				   user1_has_resource: TRUE;
  --				   TRUE: FALSE;
  --				 esac;
  --
  -- init(user2_had_resource) := FALSE;
  -- next(user2_had_resource) := case
  --				   user2_has_resource: TRUE;
  --				   TRUE: FALSE;
  --				 esac;
  --
  -- But this was just an idea which didn't go anywhere, but maybe it could be useful.


ASSIGN

--  OLD MODEL OF VERSION v1 of Tuesday 24th Jan done in class.
--  I noticed one mistake in these "case-esac" constructs for the two users: it's wrong to include 
--  the condition "! user2_has_resource" for the assignment of the resource to User1, because we
--  have to think about the next step! Not the current one! So it's actually okay if the other 
--  user has the resource in the current step, simply because we are assigning the resource in the future one.
--  
--
--  init(user1_has_resource) := FALSE;
--  next(user1_has_resource) := case
--				  ! user2_has_resource & user1_request: TRUE;		THIS IS WRONG
--				  TRUE: FALSE;
--			        esac;
--
--  init(user2_has_resource) := FALSE;
--  next(user2_has_resource) := case
--				  ! user1_has_resource & user2_request & (! user1_request): TRUE;	 THIS IS WRONG
--				  TRUE: FALSE;
--			        esac;





--  MODEL OF VERSION v2 of Wednesday 25th Jan by Lorenzo.
--  CARE: we need some sort of control to verify that the users don't have the resource
--  at the same time! Because it's actually happening, and we don't want that.
--  Additionally, in this version (and also in version v1), it might happen that the users
--  never request the resource (i.e., user1_request = FALSE and user2_request = FALSE in every step). This
--  is another problem that we need to fix! To fix it, maybe we have to model also the behavior of these two
--  variables user1_request and user2_request.
--
--  Anyways, whatever I wrote here below doesn't take into account these two problems that I just
--  mentioned. So maybe you can think about it and try to solve them.

  init(user1_has_resource) := FALSE;
  next(user1_has_resource) := case
  				   user1_request & (! user1_has_resource): TRUE;
  				   TRUE: FALSE;
  			      esac;

  init(user2_has_resource) := FALSE;
  next(user2_has_resource) := case
  				   user2_request & (! user2_has_resource): TRUE;
  				   TRUE: FALSE;
  			      esac;




LTLSPEC -- 1) At any time, if User1 requests the resource, then User1 will get the resource later on
  F (user1_request & X (F (user1_has_resource)))
  -- G (user1_request -> X (F (user1_has_resource)))


LTLSPEC -- 2) At any time, if User2 requests the resource, then User2 will get the resource later on
  F (user2_request & X (F (user2_has_resource)))
  -- G (user2_request -> X (F (user2_has_resource)))


LTLSPEC -- 3) User1 and User2 never get the resource at the same time
  G ((! user1_has_resource) | (! user2_has_resource))


LTLSPEC -- 4) Neither User1 nor User2 will ever keep the resource forever
  F (user1_has_resource & X (F (! user1_has_resource))) & F (user2_has_resource & X (F (! user2_has_resource)))
  -- G (user1_has_resouce -> X (F (! user1_has_resource))) & G (user2_has_resouce -> X (F (! user2_has_resource)))


LTLSPEC -- 5) If User1 requests the resource an infinite number of times, then it gets the resource an infinite number of times
  G (F (user1_request & X (F (user1_has_resource))))


LTLSPEC -- just a simple control to verify that eventually the user1 will have the resource
  F (user1_has_resource)

LTLSPEC -- just a simple control to verify that eventually the user2 will have the resource
  F (user2_has_resource)
  
